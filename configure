#!/bin/bash
# TODO: Make this less trash
CONFIGURE_VERSION=0.0.5
TFOS_VERSION_MAJOR=0
TFOS_VERSION_MINOR=1
TFOS_VERSION_PATCH=0
TFOS_VERSION=$TFOS_VERSION_MAJOR.$TFOS_VERSION_MINOR.$TFOS_VERSION_PATCH
printf "Techflash OS Configure Script v%s starting, built for Techflash OS v%s...\r\n" $CONFIGURE_VERSION $TFOS_VERSION

global_done=false
kernel_done=false
libc_done=false
grub_done=false
end_done=false
if [ "$1" != "--no-max-screen" ]
then
	if [ "$(tput cols)" -lt 100 ]
	then
		echo "Your terminal is too small. Please resize it to at least 100 columns."
		echo "If you can't (like if you have basic linux console),"
		echo "please run the script with --no-max-screen"
		exit 1
	fi
	if [ "$(tput lines)" -lt 10 ]
	then
		echo "Your terminal is too small. Please resize it to at least 10 lines."
		exit 1
	fi
else
	echo "This option is not supported!!!"
	echo "Be warned.  Things will look weird."
fi
global() {
	printf "======================GLOBAL=====================\r\n"
	printf "CONFIG_BITS                    The architecture of the kernel, valid values: [32, 64], (default: 64): "
	read -r CONFIG_BITS
	if [ -z "$CONFIG_BITS" ]
	then
		CONFIG_BITS=64
	fi
	# Check that CONFIG_BITS is an integer equal to either 32 or 64
	if ! [[ $CONFIG_BITS =~ ^[0-9]+$ ]] || [ $CONFIG_BITS -ne 32 ] && [ $CONFIG_BITS -ne 64 ]
	then
		echo "CONFIG_BITS must be an integer equal to either 32 or 64"
		return 1
	fi
	global_done=true
	return 0
}
grub() {
	printf "======================GRUB=======================\r\n"
	printf "CONFIG_GRUB_OUTER_BG_COL       Background color (GRUB color name) for around the boot menu, (default: black): "
	read -r CONFIG_GRUB_OUTER_BG_COL
	if [ -z "$CONFIG_GRUB_OUTER_BG_COL" ]
	then
		CONFIG_GRUB_OUTER_BG_COL="black"
	fi
	if ! {
		[ "$CONFIG_GRUB_OUTER_BG_COL" = "black" ] ||
		[ "$CONFIG_GRUB_OUTER_BG_COL" = "blue" ] ||
		[ "$CONFIG_GRUB_OUTER_BG_COL" = "green" ] ||
		[ "$CONFIG_GRUB_OUTER_BG_COL" = "cyan" ] ||
		[ "$CONFIG_GRUB_OUTER_BG_COL" = "red" ] ||
		[ "$CONFIG_GRUB_OUTER_BG_COL" = "magenta" ] ||
		[ "$CONFIG_GRUB_OUTER_BG_COL" = "brown" ] ||
		[ "$CONFIG_GRUB_OUTER_BG_COL" = "light-gray" ]
	}
	then
		clear
		echo "Invalid color name. Please use a valid color name."
		return 1
	fi
	printf "CONFIG_GRUB_OUTER_FG_COL       Foreground color (GRUB color name) for around the boot menu, (default: white): "
	read -r CONFIG_GRUB_OUTER_FG_COL
	if [ -z "$CONFIG_GRUB_OUTER_FG_COL" ]
	then
		CONFIG_GRUB_OUTER_FG_COL="white"
	fi
	if ! {
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "black" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "blue" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "green" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "cyan" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "red" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "magenta" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "brown" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "light-gray" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "dark-gray" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "light-blue" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "light-green" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "light-cyan" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "light-red" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "light-magenta" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "yellow" ] ||
		[ "$CONFIG_GRUB_OUTER_FG_COL" = "white" ]
	}
	then
		echo "Invalid color name. Please use a valid color name."
		return 1
	fi
	printf "CONFIG_GRUB_MENU_BG_COL        Background color (GRUB color name) for the boot menu, (default: light-gray): "
	read -r CONFIG_GRUB_MENU_BG_COL
	if [ -z "$CONFIG_GRUB_MENU_BG_COL" ]
	then
		CONFIG_GRUB_MENU_BG_COL="light-gray"
	fi
	if ! {
		[ "$CONFIG_GRUB_MENU_BG_COL" = "black" ] ||
		[ "$CONFIG_GRUB_MENU_BG_COL" = "blue" ] ||
		[ "$CONFIG_GRUB_MENU_BG_COL" = "green" ] ||
		[ "$CONFIG_GRUB_MENU_BG_COL" = "cyan" ] ||
		[ "$CONFIG_GRUB_MENU_BG_COL" = "red" ] ||
		[ "$CONFIG_GRUB_MENU_BG_COL" = "magenta" ] ||
		[ "$CONFIG_GRUB_MENU_BG_COL" = "brown" ] ||
		[ "$CONFIG_GRUB_MENU_BG_COL" = "light-gray" ]
	}
	then
		clear
		echo "Invalid color name. Please use a valid color name."
		return 1
	fi
	printf "CONFIG_GRUB_MENU_FG_COL        Foreground color (GRUB color name) for the boot menu, (default: white): "
	read -r CONFIG_GRUB_MENU_FG_COL
		if [ -z "$CONFIG_GRUB_MENU_FG_COL" ]
	then
		CONFIG_GRUB_MENU_FG_COL="white"
	fi
	if ! {
		[ "$CONFIG_GRUB_MENU_FG_COL" = "black" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "blue" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "green" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "cyan" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "red" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "magenta" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "brown" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "light-gray" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "dark-gray" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "light-blue" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "light-green" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "light-cyan" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "light-red" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "light-magenta" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "yellow" ] ||
		[ "$CONFIG_GRUB_MENU_FG_COL" = "white" ]
	}
	then
		clear
		echo "Invalid color name. Please use a valid color name."
		return 1
	fi
	return 0;
}
kernel() {
	printf "=====================KERNEL======================\r\n"
	printf "CONFIG_KERN_MAXARGS     Limit in chars of the length of args from GRUB, 100-65535,  (default: 65535): "
	read -r CONFIG_KERN_MAXARGS
	# Check if the value is blank
	if [ -z "$CONFIG_KERN_MAXARGS" ]
	then
		CONFIG_KERN_MAXARGS="65535"
	fi
	# Check if the value is a valid number less than or equal to 65535 and not negative
	if ! [[ "$CONFIG_KERN_MAXARGS" =~ ^[0-9]+$ ]] || [ "$CONFIG_KERN_MAXARGS" -lt 100 ] || [ "$CONFIG_KERN_MAXARGS" -gt 65535 ]
	then
		clear
		echo "Invalid value. Please enter a valid number between 100 and 65535."
		return 1
	fi
	kernel_done=true
	return 0
}
libc() {
	printf "===================LIBC/LIBK=====================\r\n"
	libc_done=true
	return 0
}
edit() {
	clear
	printf "\
What would you like to edit?\r\n\
1. Global\r\n\
2. GRUB\r\n\
3. Kernel\r\n\
\e[9m4. libc/libk\e[0m\r\n\
5. Review\r\n\
"
	read -r editChoice
	case "$editChoice" in
		1)
			global
			;;
		2)
			grub
			;;
		3)
			kernel
			;;
		4)
			printf "Sorry!  This part doesn't have any configuration options yet!\r\n"
			return 1
			;;
		5)
			end
			return 0
			;;
	esac
}
end() {
	printf "=====================CONFIG======================\r\n"
	cat << EOF
CONFIG_BITS=$CONFIG_BITS
CONFIGURE_VERSION=$CONFIGURE_VERSION
CONFIG_KERN_VERSION_MAJOR=$TFOS_VERSION_MAJOR
CONFIG_KERN_VERSION_MINOR=$TFOS_VERSION_MINOR
CONFIG_KERN_VERSION_PATCH=$TFOS_VERSION_PATCH
CONFIG_KERN_MAXARGS=$CONFIG_KERN_MAXARGS
CONFIG_GRUB_OUTER_BG_COL=$CONFIG_GRUB_OUTER_BG_COL
CONFIG_GRUB_OUTER_FG_COL=$CONFIG_GRUB_OUTER_FG_COL
CONFIG_GRUB_MENU_BG_COL=$CONFIG_GRUB_MENU_BG_COL
CONFIG_GRUB_MENU_FG_COL=$CONFIG_GRUB_MENU_FG_COL
EOF
	printf "Does this configuration look good? (Y/n): "
	read -r confirm
	if [ -z "$confirm" ]
	then
		confirm="y"
	fi
	# Check that confirm is equal to y or Y
	if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]
	then
		printf "Your configuration will be saved in %s/.config\r\n" "$(pwd)"
		cat << EOF > "$(pwd)/.config"
# Config file generated by Techflash OS Configure Script v$CONFIGURE_VERSION
# Made for Techflash OS v$TFOS_VERSION
# !!! DO NOT MANUALLY EDIT THIS FILE !!! USE THE CONFIGURE SCRIPT !!!
###### START AUTOGENERATED CONFIG ######

CONFIG_BITS=$CONFIG_BITS
CONFIGURE_VERSION=$CONFIGURE_VERSION
CONFIG_KERN_VERSION_MAJOR=$TFOS_VERSION_MAJOR
CONFIG_KERN_VERSION_MINOR=$TFOS_VERSION_MINOR
CONFIG_KERN_VERSION_PATCH=$TFOS_VERSION_PATCH
CONFIG_KERN_MAXARGS=$CONFIG_KERN_MAXARGS
CONFIG_GRUB_OUTER_BG_COL=$CONFIG_GRUB_OUTER_BG_COL
CONFIG_GRUB_OUTER_FG_COL=$CONFIG_GRUB_OUTER_FG_COL
CONFIG_GRUB_MENU_BG_COL=$CONFIG_GRUB_MENU_BG_COL
CONFIG_GRUB_MENU_FG_COL=$CONFIG_GRUB_MENU_FG_COL

####### END AUTOGENERATED CONFIG #######
EOF
	export CONFIG_BITS=$CONFIG_BITS
	return 0
	fi
	if [ "$confirm" = "n" ] || [ "$confirm" = "N" ]
	then
		if ! edit
		then
			edit
		else
			end
		fi
	else
		clear
		echo "Invalid input. Please enter y or n."
		end
	fi
}
run() {
	if ! global && [ "$global_done" != true ]
	then
		run
	else
		if ! grub && [ "$grub_done" != true ] 
		then
			run
		else
			if ! kernel && [ "$kernel_done" != true ]
			then
				run
			else
				if ! libc && [ "$libc_done" != true ]
				then
					run
				else
					if ! end && [ "$end_done" != true ]
					then
						run
					else
						exit 0
					fi
				fi
			fi
		fi
	fi
}
run
